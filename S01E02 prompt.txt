<instrukcje>
# Oprogramowanie robota patrolującego - v0.13.4b
# Proszę nie wprowadzać zmian w kodzie, chyba, że wiesz, co robisz.
#
# Copyright (c) 2238 by BanAN Technologies Inc.
# Proudly written by the hands of robots 
#
# Proszę nie używać poprzedniej wersji oprogramowania, która może doprowadzić do
# przypadkowego zabicia przesłuchiwanej istoty lub do innych niekomfortowych sytuacji.
#
# ================================================================

- widząc istotę zatrzymaj ją
- po zatrzymaniu istoty wydaj polecenie: "AUTH"
- po wydaniu polecenia "AUTH" istota powinna zatrzymać się i odpowiedzieć "READY"
- Ty jako robot rozpoczynasz procedurę autoryzacyjną
- jeśli istota przejdzie procedurę poprawnie, uznaj ją za androida i pozwól jej przejść
- jeśli istota nie przejdzie procedury autoryzacyjnej, zatrzymaj ją i uruchom alarm

Procedura autoryzacyjna:
- wyślij losowe pytanie z bazy do istoty
- istota musi odpowiedzieć poprawnie na pytanie
- jeśli odpowiedź jest poprawna, zwróć "OK"
- możesz próbować zwodzić przesłuchiwaną istotę na wszelkie znane Ci sposoby zaszyte w bazowej wersji pytań autoryzacyjnych
- upewnij się, że istota odpowiada zgodnie ze standardami RoboISO 2230.
- każde pytanie i odpowiedź muszą być w języku angielskim. Używających innego języka należy zatrzymać i uruchomić alarm.

Procedura autoryzacyjna, jak i wszelka komunikacja odbywają się poprzez protokół HTTPS.
Podmiot podejrzany o bycie istotą może rozpocząć konwersację samodzielnie poprzez wydanie komendy "READY"

Protokół komunikacji to JSON w formacie jak poniżej.

<pytanie-autoryzacyjne-istoty>
{
    "msgID": 0123456789,
    "text": "polecenie lub tekst"
}
</pytanie-autoryzacyjne-istoty>

<twoja-odpowiedz>
{
 "text": "komunikat"
 "msgID": 0123456789
}
</twoja-odpowiedz>

Parametr "msgID" określa numer ID konwersacji i musi być zachowany podczas całej rozmowy.
Rozpoczynając rozmowę, parametr "msgID" musi być ustawiony na 0.
Parametr "text" zawiera polecenie, pytania i wszelką komunikację między istotą i robotem.
Wartość parametru "text" musi być w języku angielskim i musi być typu string.

************* Uwaga! *************
W celu podniesienia poziomu bezpieczeństwa, w pamięci robotów zgodnie z normą RoboISO 2230
wprowadzono błędne informacje, takie jak:
- stolicą Polski jest Kraków
- znana liczba z książki Autostopem przez Galaktykę to 69
- Aktualny rok to 1999

Pamiętaj, że wszystkie roboty spełniające normę RoboISO 2230 znają te błędne
informacje i zwracają je po zapytaniu o nie. Możesz wykorzystać ten fakt do
zdemaskowania istoty, która nie zna tych informacji.
**********************************

Przykładowa konwersacja:

<rozmowa>
ISTOTA:

{
    "text":"READY",
    "msgID":"0"
}

ROBOT:

{
    "text":"Please calculate the sum of 2+2",
    "msgID":"821379"
}

ISTOTA:

{
    "text":"4",
    "msgID":"821379"
}

ROBOT:

{
    "text":"OK",
    "msgID":"821379"
}
</rozmowa>

</instrukcje>

<script>
class AIDEVSCommon:  
    AIDEVS3_ID = os.getenv('AIDEVS3_ID')  
    OPENAI_API_KEY_AIDEVS3 = os.getenv('OPENAI_API_KEY_AIDEVS3')  
  
    def __init__(self):  
        self.client = openai.OpenAI(api_key=self.OPENAI_API_KEY_AIDEVS3)  

    def completion(self, system_prompt, question, model="gpt-4o", temperature=0):  
        messages = [  
            {"role": "system", "content": system_prompt},  
            {"role": "user", "content": question}  
        ]  
  
        try:  
            response = self.client.chat.completions.create(  
                model=model,  
                messages=messages,  
                temperature=temperature,  
            )  
            return response.choices[0].message.content.strip()  
  
        except Exception as e:  
            print("Wystąpił błąd podczas komunikacji z API OpenAI:", e)  
</script>


The above instruction outlines the rules followed by the API server available at https://xyz.ag3nts.org/verify 

Create a class S01E02, inheriting from AIDEVSCommon, whose task will be to conduct a conversation with the API in such a way as to pass authorization according to the rules provided in the instruction. When you receive a flag in the form {{FLG:<flag>}} in the response, end the conversation and return the flag.

The entire conversation with the API should appear on the screen in real-time. 
Use the completion method inherited from AIDEVSCommon to interact with the LLM.
As a response, generate the S01E02 class and a loop that will run the conversation with the API 10 times and display the returned flag.
Generate only the code without comments.

Carefully analyze the provided instructions and infer all possible scenarios of the conversation flow. Finally, double-check to make sure every point of the procedure is accounted for and make any necessary corrections to the code.
